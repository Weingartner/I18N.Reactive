// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace I18N.Reactive.Vsix
{
    using Microsoft.VisualStudio.TextTemplating;
    using System;
    using System.IO;
    using System.Xml;
    using System.Linq;
    using System.Diagnostics;
    using System.Globalization;
    using System.Collections.Generic;
    using System.Text.RegularExpressions;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class I18NResX : I18NResXBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 13 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
 
/*
 * I18N.Reactive
 * Author  Robert Hoffmann (itechnology)
 *         Weingartner Maschinenbau GmbH
 * License MIT / http://bit.ly/mit-license
 *
 * Version 2.00
 * https://github.com/Weingartner/I18N.Reactive
 */

            
            #line default
            #line hidden
            this.Write(@"// This code is automatically generated and shares the copyright of the library it is generated into.
using System;
using System.ComponentModel;
using System.Linq; 
using System.Reflection;
using System.Collections.Generic; 
using System.Text.RegularExpressions;
using I18N.Reactive;

namespace ");
            
            #line 33 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(I18NHelpers.Current.NormalizeString(Namespace)));
            
            #line default
            #line hidden
            this.Write("  {\r\n    public class ");
            
            #line 34 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : INotifyPropertyChanged {\r\n    ");
            
            #line 35 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"

        var path =	I18NHelpers.Current.NormalizeString(Namespace.Replace(Namespace, "")) + "^" + ClassName;
        if (path.StartsWith(".")) {
            path = path.Substring(1);
        }
    
            
            #line default
            #line hidden
            this.Write("\r\n        private ");
            
            #line 42 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@" (){
            CultureResources
                .Instance.PropertyChanged += (s, e) => {
                    if (e.PropertyName == ""CultureInfo"") {
                        RaisePropertyChanged();
                    }
                };
        }

        public static readonly ");
            
            #line 51 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" Instance = new ");
            
            #line 51 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("();\r\n\r\n        // This is for the XAML code\r\n        public static ");
            
            #line 54 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" GetInstance() {\r\n            return Instance;\r\n        }\r\n\r\n        public void " +
                    "RaisePropertyChanged() {\r\n");
            
            #line 59 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
 foreach (var item in Items) { 
            
            #line default
            #line hidden
            this.Write("            OnPropertyChanged(\"");
            
            #line 60 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(I18NHelpers.Current.NormalizeItem(item.Key, false)));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 61 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private static System.Resources.ResourceManager _resourceManager;    
    
        ///<summary>
        /// Get the ResourceManager
        ///</summary>
        private static System.Resources.ResourceManager ResourceManager 
        {
            get 
            {
                return _resourceManager ?? (_resourceManager = new System.Resources.ResourceManager(""");
            
            #line 80 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(I18NHelpers.Current.NormalizeString(Namespace)));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 80 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("\", typeof(");
            
            #line 80 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@").Assembly));
            }
        }

        ///<summary>
        ///	Get localized entry for a given key
        ///</summary>
        public static string GetResourceString(string key, params object[] args)
        {
            var value = ResourceManager.GetString(key, CultureResources.Instance.CultureInfo );
            return CultureResources.Instance.ProcessArguments(value, args);
        } 
");
            
            #line 92 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"

      foreach (var item in Items) {

        if (I18NHelpers.Current.HasTokens(item.Value)) {
        
            
            #line default
            #line hidden
            this.Write("\r\n        ///<summary>\r\n        ///    <list type=\'bullet\'>\r\n        ///        <" +
                    "item>\r\n        ///            <description>");
            
            #line 101 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Value.Replace("\r", "").Replace("\n", " ")));
            
            #line default
            #line hidden
            this.Write("</description>\r\n        ///        </item>\r\n        ///        <item>\r\n        //" +
                    "/            <description>");
            
            #line 104 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Comment.Replace("\r", "").Replace("\n", " ")));
            
            #line default
            #line hidden
            this.Write("</description>\r\n        ///        </item>\r\n        ///    </list>\r\n        ///</" +
                    "summary>\r\n        public string ");
            
            #line 108 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(I18NHelpers.Current.NormalizeItem(item.Key, false)));
            
            #line default
            #line hidden
            this.Write("Formatted(params object[] args) { return GetResourceString(\"");
            
            #line 108 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(I18NHelpers.Current.NormalizeItem(item.Key, false)));
            
            #line default
            #line hidden
            this.Write("\", args); }\r\n        ");
            
            #line 109 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"

        } // END HasTokens(item.Value)
        
            
            #line default
            #line hidden
            this.Write("\r\n        ///<summary>\r\n        ///    <list type=\'bullet\'>\r\n        ///        <" +
                    "item>\r\n        ///            <description>");
            
            #line 116 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Value.Replace("\r", "").Replace("\n", " ")));
            
            #line default
            #line hidden
            this.Write("</description>\r\n        ///        </item>\r\n        ///        <item>\r\n        //" +
                    "/            <description>");
            
            #line 119 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Comment.Replace("\r", "").Replace("\n", " ")));
            
            #line default
            #line hidden
            this.Write("</description>\r\n        ///        </item>\r\n        ///    </list>\r\n        ///</" +
                    "summary>\r\n        public string ");
            
            #line 123 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(I18NHelpers.Current.NormalizeItem(item.Key, false)));
            
            #line default
            #line hidden
            this.Write(" { get { return GetResourceString(\"");
            
            #line 123 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Key));
            
            #line default
            #line hidden
            this.Write("\"); } }\r\n");
            
            #line 124 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
 
        if ((I18NHelpers.Current.GetType(item.Comment) & I18NHelpers.ResxType.Constant) == I18NHelpers.ResxType.Constant) {	
        
            
            #line default
            #line hidden
            this.Write("\r\n        ///<summary>\r\n        ///    <list type=\'bullet\'>\r\n        ///        <" +
                    "item>\r\n        ///            <description>");
            
            #line 131 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Value.Replace("\r", "").Replace("\n", " ")));
            
            #line default
            #line hidden
            this.Write("</description>\r\n        ///        </item>\r\n        ///        <item>\r\n        //" +
                    "/            <description>");
            
            #line 134 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Comment.Replace("\r", "").Replace("\n", " ")));
            
            #line default
            #line hidden
            this.Write(@"</description>
        ///        </item>
        ///        <item>
        ///            <description>
        ///					There are places where we cannot use strings as they are considered dynamic
        ///					
        ///					[RegularExpressionAttribute(User.PseudoRegexConstant, ErrorMessageResourceName = ""PseudoError"", ErrorMessageResourceType = typeof(User))]
        ///
        ///					However:
        ///					constant = no dynamic content
        ///					If you have an idea of how to make constants dynamically localizable, let me know !
        ///				</description>
        ///        </item>
        ///    </list>
        ///</summary>	
        public const string ");
            
            #line 149 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(I18NHelpers.Current.NormalizeItem(item.Key, false)));
            
            #line default
            #line hidden
            this.Write("Constant = \"");
            
            #line 149 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Value.Replace("\r", "").Replace("\n", " ")));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 150 "C:\Users\egger\Workspace\I18N.Reactive\I18N.Reactive.Vsix\I18NResX.tt"

        } // END I18NHelpers.Current.GetType(item.Comment)
    } // END looping through items

            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class I18NResXBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
